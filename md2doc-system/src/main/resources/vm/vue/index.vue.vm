<template>
  <div class="${className}-container">
    <div>
      <el-form :inline="true" :model="searchForm" class="demo-form-inline">
        <el-form-item label="${functionName}名称">
          <el-input v-model="searchForm.${className}Name" placeholder="请输入${functionName}名称"></el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="getList" size="medium">搜索</el-button>
          <el-button @click="searchForm = {}" size="medium">重置</el-button>
        </el-form-item>
      </el-form>
    </div>
    <div class="btn-div">
      <div>
        <el-button plain size="mini" type="primary" @click="handleAdd">新增</el-button>
        <el-button plain size="mini" type="danger" @click="handleDelete(multipleSelectionIds)" :disabled="multipleSelectionIds.length === 0">批量删除</el-button>
      </div>
      <div>

      </div>
    </div>
    <div>
      <el-table v-loading="loading" :data="tableList" @selection-change="handleSelectionChange">
        <el-table-column type="selection" width="50" align="center" />
#foreach($column in $filterColumns)
        <el-table-column label="${column.columnComment}" align="center" key="${column.javaField}" prop="${column.javaField}" :show-overflow-tooltip="true" />
#end
        <el-table-column label="状态" align="center" key="status" width="100">
          <template slot-scope="scope">
            <dict-tag :options="dict.type.common_status" :value="scope.row.status"/>
          </template>
        </el-table-column>
        <el-table-column label="创建时间" align="center" prop="createTime" width="160">
        </el-table-column>
        <el-table-column label="更新时间" align="center" prop="updateTime" width="160">
        </el-table-column>
        <el-table-column
            label="操作"
            align="center"
            width="250"
        >
          <template slot-scope="scope">
            <el-button
                size="mini"
                type="text"
                icon="el-icon-edit"
                @click="handleUpdate(scope.row)"
            >修改</el-button>
            <el-button
                size="mini"
                type="text"
                icon="el-icon-delete"
                @click="handleDelete([scope.row.${className}Id])"
            >删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
    <pagination
        v-show="searchForm.total > 0"
        :total="searchForm.total"
        :page.sync="searchForm.pageNum"
        :limit.sync="searchForm.pageSize"
        @pagination="getList"
    />
    <el-dialog
        :title="dialogTitle"
        :visible.sync="dialogVisible"
        width="30%"
        :before-close="handleClose">
      <el-form ref="form" :model="form" label-width="80px" :rules="rules">
#foreach($column in $filterColumns)
#if(!$column.isPk)
        <el-form-item label="${column.columnComment}" prop="${column.javaField}">
          <el-input v-model="form.${column.javaField}"></el-input>
        </el-form-item>
#end
#end
        <el-form-item label="${functionName}状态">
          <el-radio-group v-model="form.status">
            <el-radio :label="parseInt(item.value)" v-for="(item, index) in dict.type.common_status" :key="index">{{ item.label }}</el-radio>
          </el-radio-group>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogVisible = false">取 消</el-button>
        <el-button type="primary" @click="onSubmit" :loading="submitLoading">确 定</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
import {get${ClassName}Page, add${ClassName}, update${ClassName}, delete${ClassName}} from '@/api/${moduleName}/${className}'

export default {
  name: '${ClassName}',
  dicts: ['common_status'],
  data() {
    return {
      searchForm: {
        pageNum: 1,
        pageSize: 10,
        total: 0,
      },
      form: {},
      tableList: [],
      loading: false,
      submitLoading: false,
      dialogVisible: false,
      dialogTitle: null,
      rules: {
        ${className}Name: [
          { required: true, message: "${functionName}名称不能为空", trigger: "blur" }
        ],
        ${className}Key: [
          { required: true, message: "${functionName}字符不能为空", trigger: "blur" }
        ],
      },
      multipleSelectionIds: []
    }
  },
  mounted() {
    this.getList();
  },
  methods: {
    getList() {
      this.loading = true;
      get${ClassName}Page(this.searchForm).then(res => {
        this.tableList = res.data.list;
        this.searchForm.total = parseInt(res.data.total);
        this.loading = false;
      }).catch(error => {
        this.loading = false;
      })
    },
    onSubmit() {
      this.#[[$]]#refs["form"].validate(valid => {
        if (valid) {
          this.submitLoading = true;
          if (this.form.${className}Id != undefined) {
            update${ClassName}(this.form).then(response => {
              this.#[[$modal]]#.msgSuccess("修改成功");
              this.submitLoading = false;
              this.dialogVisible = false;
              this.getList();
            }).catch(error => {
              this.submitLoading = false;
            });
          } else {
            add${ClassName}(this.form).then(response => {
              this.#[[$modal]]#.msgSuccess("新增成功");
              this.submitLoading = false;
              this.dialogVisible = false;
              this.getList();
            }).catch(error => {
              this.submitLoading = false;
            });
          }
        }
      });
    },
    handleUpdate(item) {
      this.form = item;
      this.dialogTitle = "修改${functionName}";
      this.dialogVisible = true;
    },
    handleDelete(ids) {
      if (ids === null || ids.length === 0) {
        this.#[[$modal]]#.msgWarning("未选中${functionName}列表");
        return;
      }
      this.#[[$modal]]#.confirm('是否确认删除${functionName}编号为"' + ids + '"的数据项？').then(() => {
        this.loading = true;
        return delete${ClassName}({
          ${className}Ids: ids
        });
      }).then(() => {
        this.#[[$modal]]#.msgSuccess("删除成功");
        this.loading = false;
        this.getList();
      }).catch((error) => {
        this.loading = false;
      });
    },
    handleAdd() {
      this.dialogTitle = "新增${functionName}";
      this.dialogVisible = true;
    },
    handleClose() {
      this.form = {
        menuCheckStrictly: true,
      };
      this.dialogVisible = false;
    },
    handleSelectionChange(val) {
      this.multipleSelectionIds = val.map(item => item.${className}Id);
    }
  }
}
</script>

<style lang="scss" scoped>
.${className}-container {
  padding: 20px;
}

.btn-div {
  display: flex;
  justify-content: space-between;
  align-content: center;
}

</style>